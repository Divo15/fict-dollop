import java.util.ArrayList;
import java.util.List;
import java.util.Arrays; // Needed for Arrays.copyOf

class Solution {
    public int[][] insert(int[][] intervals, int[] newInterval) {
        // Use a List to dynamically build the result, as the size is unknown due to merging.
        List<int[]> result = new ArrayList<>();
        int i = 0;
        int n = intervals.length;

        // 1. Add all intervals that come **before** the new interval (no overlap).
        // Condition: The current interval ends before the new one starts.
        while (i < n && intervals[i][1] < newInterval[0]) {
            result.add(intervals[i]);
            i++;
        }

        // 2. **Merge** overlapping intervals.
        // Condition: The current interval starts before the new one ends (i.e., they overlap).
        while (i < n && intervals[i][0] <= newInterval[1]) {
            // Update the start of newInterval to the minimum of the two starts
            newInterval[0] = Math.min(newInterval[0], intervals[i][0]);
            // Update the end of newInterval to the maximum of the two ends
            newInterval[1] = Math.max(newInterval[1], intervals[i][1]);
            i++;
        }
        
        // After merging, add the combined newInterval to the result list.
        result.add(newInterval);

        // 3. Add all remaining intervals that come **after** the merged interval (no overlap).
        while (i < n) {
            result.add(intervals[i]);
            i++;
        }

        // Convert the List<int[]> back to a final int[][] array and return.
        // The size is correct because we used the list's size.
        return result.toArray(new int[result.size()][]);
    }
}
